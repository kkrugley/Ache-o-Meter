import asyncio
import logging
import os
from urllib.parse import quote
from datetime import datetime

import aiohttp
import pytz
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from timezonefinder import TimezoneFinder

import database as db
import forecast as fcst

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
load_dotenv()
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()
tf = TimezoneFinder()
scheduler = AsyncIOScheduler(timezone="UTC")

# –û–ë–ù–û–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞
class UserState(StatesGroup):
    waiting_for_time = State()
    waiting_for_city_confirmation = State()

# --- –†–∞—Å—Å—ã–ª–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ ---

async def send_forecast_to_user(user_id: int, chat_id: int):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user = db.get_user_by_id(user_id)
    if not user or not user['is_active']:
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return

    logging.info(f"–ì–æ—Ç–æ–≤–ª—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –≥–æ—Ä–æ–¥–µ {user['city']}")
    try:
        all_data = await fcst.get_forecast_data(user['lat'], user['lon'])
        message_text = fcst.analyze_data_and_form_message(all_data)
        await bot.send_message(chat_id, message_text)
        logging.info(f"–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)

async def scheduled_check_and_send():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –Ω–∞—á–∏–Ω–∞—é –µ–∂–µ—á–∞—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    users = db.get_all_active_users()
    if not users:
        return

    for user in users:
        try:
            user_tz = pytz.timezone(str(user['timezone']))
            user_local_time = datetime.now(user_tz)
            if user_local_time.strftime('%H:%M') == user['notification_time']:
                logging.info(f"–í—Ä–µ–º—è —Å–æ–≤–ø–∞–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–≥–Ω–æ–∑.")
                await send_forecast_to_user(user['user_id'], user['chat_id'])
        except Exception as e:
            logging.error(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}", exc_info=True)

# --- API –ì–µ–æ–∫–æ–¥–µ—Ä–∞ ---

async def get_coords_by_city(city_name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞."""
    if not YANDEX_API_KEY:
        logging.error("YANDEX_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
        return None, None, None, None
    
    encoded_city = quote(city_name)
    url = f"https://geocode-maps.yandex.ru/1.x/?geocode={encoded_city}&apikey={YANDEX_API_KEY}&format=json&results=1"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                response.raise_for_status()
                data = await response.json(content_type=None)
                geo_objects = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])
                if geo_objects:
                    geo_object = geo_objects[0]['GeoObject']
                    lon_str, lat_str = geo_object['Point']['pos'].split()
                    lat, lon = float(lat_str), float(lon_str)
                    found_city_name = geo_object['metaDataProperty']['GeocoderMetaData']['text']
                    timezone_str = tf.timezone_at(lng=lon, lat=lat)
                    return found_city_name, lat, lon, timezone_str
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –Ø–Ω–¥–µ–∫—Å.–ì–µ–æ–∫–æ–¥–µ—Ä—É: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ø–Ω–¥–µ–∫—Å.–ì–µ–æ–∫–æ–¥–µ—Ä–∞: {e}")
    return None, None, None, None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message(CommandStart())
async def handle_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç 'Ache-o-Meter'. üå¶Ô∏è\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ —Å–µ–≥–æ–¥–Ω—è –æ–∂–∏–¥–∞—Ç—å –≥–æ–ª–æ–≤–Ω–æ–π –±–æ–ª–∏ –∏–∑-–∑–∞ –ø–æ–≥–æ–¥—ã.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞.")

@dp.message(Command('help'))
async def handle_help(message: types.Message):
    help_text = (
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–µ—Ç–µ–æ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –ø–µ—Ä–µ–ø–∞–¥—ã –¥–∞–≤–ª–µ–Ω–∏—è, –º–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –ø—ã–ª—å—Ü—ã.\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.\n"
        "/settings - –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
        "/forecast_now - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.\n"
        "/stop - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥, –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ."
    )
    await message.answer(help_text)

@dp.message(Command('stop'))
async def handle_stop(message: types.Message):
    db.set_user_active(message.from_user.id, is_active=False)
    await message.answer("–Ø –ø–æ–Ω—è–ª, –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –±–µ—Å–ø–æ–∫–æ–∏—Ç—å. üò¥\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è.")

# –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: /forecast_now
@dp.message(Command('forecast_now'))
async def handle_forecast_now(message: types.Message):
    user = db.get_user_by_id(message.from_user.id)
    if user and user['is_active']:
        await message.answer("–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –≤—Å—ë –ø—Ä–æ–≤–µ—Ä—é –∏ –ø—Ä–∏—à–ª—é. –û–¥–∏–Ω –º–æ–º–µ–Ω—Ç... üïµÔ∏è")
        await send_forecast_to_user(message.from_user.id, message.chat.id)
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É. /start")

@dp.message(Command('settings'))
async def handle_settings(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")],
        [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_time")]
    ])
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?", reply_markup=keyboard)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---

@dp.callback_query(F.data == "change_city")
async def process_change_city_callback(callback: types.CallbackQuery):
    await callback.message.answer("–•–æ—Ä–æ—à–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
    await callback.answer()

@dp.callback_query(F.data == "change_time")
async def process_change_time_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–Ω—è–ª. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ß–ß:–ú–ú* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30 –∏–ª–∏ 22:00).")
    await state.set_state(UserState.waiting_for_time)
    await callback.answer()

@dp.message(UserState.waiting_for_time, F.text)
async def process_new_time(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, '%H:%M')
        db.update_user_notification_time(message.from_user.id, message.text)
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ù–æ–≤–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *{message.text}*.")
        await state.clear()
    except ValueError:
        await message.answer("–û–π, —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ß–ß:–ú–ú* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00).")

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã –≥–æ—Ä–æ–¥–∞
@dp.callback_query(UserState.waiting_for_city_confirmation, F.data.startswith("confirm_city_"))
async def process_city_confirmation(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split('_')[2]
    user_data = await state.get_data()

    if action == "yes":
        city_info = user_data['city_info']
        db.add_or_update_user(
            user_id=callback.from_user.id, 
            chat_id=callback.message.chat.id, 
            city=city_info['name'], 
            lat=city_info['lat'], 
            lon=city_info['lon'], 
            timezone=city_info['tz']
        )
        await callback.message.edit_text(f"–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª: **{city_info['name']}**. üòé\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –¥–µ–ª–µ! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π /settings.")
    else: # action == 'no'
        await callback.message.edit_text("–ü–æ–Ω—è–ª, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—é. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
    
    await state.clear()
    await callback.answer()

# --- –£–ú–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ---
@dp.message(F.text)
async def handle_text_message(message: types.Message, state: FSMContext):
    await message.answer("–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≥–æ—Ä–æ–¥—É... ‚è≥")
    found_city_name, lat, lon, timezone = await get_coords_by_city(message.text)
    
    if lat and lon and timezone:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.set_data({
            'city_info': {'name': found_city_name, 'lat': lat, 'lon': lon, 'tz': timezone}
        })
        await state.set_state(UserState.waiting_for_city_confirmation)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, —ç—Ç–æ –æ–Ω", callback_data="confirm_city_yes")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –¥—Ä—É–≥–æ–π", callback_data="confirm_city_no")]
        ])
        await message.answer(f"–Ø –Ω–∞—à–µ–ª –≤–æ—Ç —ç—Ç–æ: **{found_city_name}**. –≠—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥?", reply_markup=keyboard)
    else:
        await message.answer(f"–û–π, —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ '{message.text}'. üòî\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –ø–æ-–¥—Ä—É–≥–æ–º—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å, –Ω–µ—Ç –ª–∏ –æ–ø–µ—á–∞—Ç–æ–∫.")

# --- –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ ---

async def on_shutdown(dispatcher: Dispatcher):
    logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    scheduler.shutdown(wait=False)
    await bot.session.close()
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def main():
    db.init_db()
    dp.shutdown.register(on_shutdown)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑ –≤ —á–∞—Å
    scheduler.add_job(scheduled_check_and_send, 'cron', hour='*', minute=0)
    scheduler.start()
    
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –≤—Ä—É—á–Ω—É—é.")
