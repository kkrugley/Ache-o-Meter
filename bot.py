import asyncio
import logging
import os
from urllib.parse import quote
from datetime import datetime

import aiohttp
import pytz
from aiogram import Bot, Dispatcher, types, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv
from timezonefinder import TimezoneFinder

import database as db
import forecast as fcst

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
load_dotenv()
logging.basicConfig(level=logging.INFO)

BOT_TOKEN = os.getenv("BOT_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN))
dp = Dispatcher()
tf = TimezoneFinder()
# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫, –Ω–æ –ø–æ–∫–∞ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º
scheduler = AsyncIOScheduler(timezone="UTC")

class SettingsState(StatesGroup):
    waiting_for_time = State()

# --- –†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ ---
async def send_forecast_to_user(user):
    logging.info(f"–ì–æ—Ç–æ–≤–ª—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']} –≤ –≥–æ—Ä–æ–¥–µ {user['city']}")
    try:
        all_data = await fcst.get_forecast_data(user['lat'], user['lon'])
        message_text = fcst.analyze_data_and_form_message(all_data)
        await bot.send_message(user['chat_id'], message_text)
        logging.info(f"–ü—Ä–æ–≥–Ω–æ–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}", exc_info=True)

async def daily_check_and_send():
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –Ω–∞—á–∏–Ω–∞—é –µ–∂–µ—á–∞—Å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    users = db.get_all_active_users()
    if not users:
        return

    for user in users:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ –æ–±—ä–µ–∫—Ç timezone
            user_tz = pytz.timezone(str(user['timezone']))
            
            user_local_time = datetime.now(user_tz)
            notification_time_str = user['notification_time']
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ß–ß:–ú–ú"
            if user_local_time.strftime('%H:%M') == notification_time_str:
                logging.info(f"–í—Ä–µ–º—è —Å–æ–≤–ø–∞–ª–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}. –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–≥–Ω–æ–∑.")
                await send_forecast_to_user(user)
                
        except Exception as e:
            logging.error(f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']}: {e}", exc_info=True)

# --- API –ì–µ–æ–∫–æ–¥–µ—Ä–∞ ---
async def get_coords_by_city(city_name: str):
    if not YANDEX_API_KEY: return None, None, None, None
    full_url = f"https://geocode-maps.yandex.ru/1.x/?geocode={quote(city_name)}&apikey={YANDEX_API_KEY}&format=json&results=1"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(full_url) as response:
                if response.status == 200:
                    data = await response.json(content_type=None)
                    if data['response']['GeoObjectCollection']['featureMember']:
                        geo_object = data['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']
                        lon_str, lat_str = geo_object['Point']['pos'].split()
                        lat, lon = float(lat_str), float(lon_str)
                        found_city_name = geo_object['metaDataProperty']['GeocoderMetaData']['text']
                        timezone_str = tf.timezone_at(lng=lon, lat=lat)
                        return found_city_name, lat, lon, timezone_str
    except Exception: return None, None, None, None
    return None, None, None, None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(CommandStart())
async def handle_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç 'Ache-o-Meter'. üå¶Ô∏è\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å, –±—É–¥–µ—à—å –ª–∏ —Ç—ã —Å—Ç—Ä–∞–¥–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –æ—Ç —Å–≤–æ–µ–π –º–µ—Ç–µ–æ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ üòî –∏–ª–∏ –Ω–µ—Ç üòä.\n\n–î–ª—è –Ω–∞—á–∞–ª–∞, –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞.")

@dp.message(Command('help'))
async def handle_help(message: types.Message):
    await message.answer("–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—é –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –º–µ—Ç–µ–æ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ª—é–¥–µ–π.–Ø –æ–ø—Ä–µ–¥–µ–ª—è—é –±—É–¥—É—Ç –ª–∏ —Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–≥–æ–¥–µ, –º–∞–≥–Ω–∏—Ç–Ω—ã–µ –∏ —Å–æ–ª–Ω–µ—á–Ω—ã–µ –±—É—Ä–∏, –∞ —Ç–∞–∫–∂–µ –Ω–∞–ª–∏—á–∏–µ –∞–ª–ª–µ—Ä–≥–µ–Ω–æ–≤ –≤ –≤–æ–∑–¥—É—Ö–µ.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/settings - –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—Ä–µ–º—è.\n/stop - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.\n/help - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥, –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

@dp.message(Command('stop'))
async def handle_stop(message: types.Message):
    db.set_user_active(message.from_user.id, is_active=False)
    await message.answer("–Ø –ø–æ–Ω—è–ª, –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –±–µ—Å–ø–æ–∫–æ–∏—Ç—å. üò¥\n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—Å—è.")

@dp.message(Command('settings'))
async def handle_settings(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="change_city")], [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_time")]])
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å?", reply_markup=keyboard)

@dp.callback_query(F.data == "change_city")
async def process_change_city_callback(callback: types.CallbackQuery):
    await callback.message.answer("–•–æ—Ä–æ—à–æ, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
    await callback.answer()

@dp.callback_query(F.data == "change_time")
async def process_change_time_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–æ–Ω—è–ª. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ß–ß:–ú–ú* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:30 –∏–ª–∏ 22:00).")
    await state.set_state(SettingsState.waiting_for_time)
    await callback.answer()

@dp.message(SettingsState.waiting_for_time, F.text)
async def process_new_time(message: types.Message, state: FSMContext):
    try:
        datetime.strptime(message.text, '%H:%M')
        db.update_user_notification_time(message.from_user.id, message.text)
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ù–æ–≤–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *{message.text}*.")
        await state.clear()
    except ValueError:
        await message.answer("–û–π, —Ñ–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ß–ß:–ú–ú* (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00).")

@dp.message(F.text)
async def handle_city_message(message: types.Message):
    found_city_name, lat, lon, timezone = await get_coords_by_city(message.text)
    if lat and lon and timezone:
        db.add_or_update_user(user_id=message.from_user.id, chat_id=message.chat.id, city=found_city_name, lat=lat, lon=lon, timezone=timezone)
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª: **{found_city_name}**. üòé\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –≤ –¥–µ–ª–µ! –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—Ä–µ–º—è, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É /settings.")
    else:
        await message.answer(f"–û–π, —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ '{message.text}'. üòî\n–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –ø–æ-–¥—Ä—É–≥–æ–º—É.")

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è "—á–∏—Å—Ç–æ–π" –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ ---
async def on_shutdown(dispatcher: Dispatcher):
    logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    scheduler.shutdown(wait=False)
    await dispatcher.storage.close()
    await bot.session.close()
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    db.init_db()
    dp.shutdown.register(on_shutdown)
    
    # "–ë–æ–µ–≤–æ–π" —Ä–µ–∂–∏–º: –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑ –≤ —á–∞—Å –≤ 00 –º–∏–Ω—É—Ç.
    scheduler.add_job(daily_check_and_send, 'cron', hour='*', minute=0)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω):
    # scheduler.add_job(daily_check_and_send, 'interval', seconds=30)
    
    scheduler.start()
    
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –≤—Ä—É—á–Ω—É—é.")