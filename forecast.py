import logging
import aiohttp
from datetime import datetime, timedelta
import asyncio
import html
import pytz

PARAMETER_DESCRIPTIONS = {
    "pressure": "<b>üåÄ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ:</b> –†–µ–∑–∫–∏–µ –ø–µ—Ä–µ–ø–∞–¥—ã –¥–∞–≤–ª–µ–Ω–∏—è ‚Äî –æ–¥–∏–Ω –∏–∑ –≥–ª–∞–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ. –û–Ω–∏ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –≥–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è.",
    "temperature": "<b>üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è:</b> –í–Ω–µ–∑–∞–ø–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∑–∞—Å—Ç–∞–≤–ª—è—é—Ç –æ—Ä–≥–∞–Ω–∏–∑–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–µ—Å—Å–æ–º, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã.",
    "humidity": "<b>üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞:</b> –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É. –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –∏–ª–∏ –Ω–∏–∑–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç.",
    "geomagnetic": "<b>üåå –ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> –ú–∞–≥–Ω–∏—Ç–Ω—ã–µ –±—É—Ä–∏ (–≤—ã—Å–æ–∫–∏–π Kp-–∏–Ω–¥–µ–∫—Å) –º–æ–≥—É—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –Ω–µ—Ä–≤–Ω—É—é –∏ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—ã, –≤—ã–∑—ã–≤–∞—è –æ–±—â–µ–µ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏–µ.",
    "solar_activity": "<b>‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b> –£—Å–∏–ª–µ–Ω–∏–µ —Å–æ–ª–µ—á–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞ –º–æ–∂–µ—Ç –∫–æ—Å–≤–µ–Ω–Ω–æ –≤–ª–∏—è—Ç—å –Ω–∞ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É –ó–µ–º–ª–∏ –∏, –∫–∞–∫ —Å–ª–µ–¥—Å—Ç–≤–∏–µ, –Ω–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ."
}

async def get_forecast_data(lat: float, lon: float):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ, –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –∏ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    weather_data, geo_data, solar_data = await asyncio.gather(
        get_open_meteo_data(lat, lon),
        get_noaa_geo_data(),
        get_solar_activity_data()
    )
    return {**weather_data, **geo_data, **solar_data}

async def get_open_meteo_data(lat: float, lon: float):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –¥–∞–≤–ª–µ–Ω–∏–µ, –≤–ª–∞–∂–Ω–æ—Å—Ç—å) —Å Open-Meteo.
    """
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        'latitude': lat,
        'longitude': lon,
        'hourly': 'temperature_2m,surface_pressure,relative_humidity_2m',
        'daily': 'temperature_2m_max,temperature_2m_min',
        'forecast_days': 3, 
        'timezone': 'auto'
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                response.raise_for_status()
                logging.info("–î–∞–Ω–Ω—ã–µ —Å Open-Meteo —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
                return await response.json()
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Open-Meteo: {e}")
    return {}

async def get_noaa_geo_data():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (Kp-–∏–Ω–¥–µ–∫—Å) —Å NOAA SWPC.
    """
    url = "https://services.swpc.noaa.gov/products/noaa-planetary-k-index-forecast.json"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                response.raise_for_status()
                data = await response.json()
                processed_data = [
                    {'time_tag': item[0], 'kp_value': float(item[1]), 'observation_status': item[2]}
                    for item in data[1:] if len(item) >= 3
                ]
                logging.info("–î–∞–Ω–Ω—ã–µ –æ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ —Å NOAA —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
                return {'geo_forecast': processed_data}
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ NOAA: {e}")
    return {}

async def get_solar_activity_data():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω–µ—á–Ω–æ–º –≤–µ—Ç—Ä–µ (—Å–∫–æ—Ä–æ—Å—Ç—å) –∫–∞–∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
    """
    # –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    start_date = (datetime.utcnow() - timedelta(days=3)).strftime('%Y-%m-%d')
    end_date = datetime.utcnow().strftime('%Y-%m-%d')
    url = f"https://services.swpc.noaa.gov/products/solar-wind/plasma-5-minute.json"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                response.raise_for_status()
                data = await response.json()
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∫–æ—Ä–æ—Å—Ç—å
                processed_data = [float(item[1]) for item in data[1:] if len(item) > 1 and item[1] != '-9999.9']
                logging.info("–î–∞–Ω–Ω—ã–µ –æ —Å–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
                return {'solar_wind_speed': processed_data}
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ NOAA (solar wind): {e}")
    return {}


# --- –ê–Ω–∞–ª–∏–∑ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---

def analyze_data_and_form_message(data: dict):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    if not data:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ. ü§∑‚Äç‚ôÇÔ∏è"

    risks = []
    now = datetime.now().astimezone()
    
    # 1. –ê–Ω–∞–ª–∏–∑ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è
    try:
        hourly_pressure = data['hourly']['surface_pressure']
        # –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞
        past_24h_pressure = [p for t, p in zip(data['hourly']['time'], hourly_pressure) if now - timedelta(hours=24) <= datetime.fromisoformat(t) < now]
        future_24h_pressure = [p for t, p in zip(data['hourly']['time'], hourly_pressure) if now <= datetime.fromisoformat(t) < now + timedelta(hours=24)]
        
        if past_24h_pressure and future_24h_pressure:
            # –ü–µ—Ä–µ–≤–æ–¥ –∏–∑ –≥–ü–∞ –≤ –º–º —Ä—Ç. —Å—Ç. (1 –≥–ü–∞ ‚âà 0.750062 –º–º —Ä—Ç. —Å—Ç.)
            hpa_to_mmhg = 0.750062
            pressure_change_24h = (max(future_24h_pressure) - min(past_24h_pressure)) * hpa_to_mmhg
            
            if abs(pressure_change_24h) > 7:
                risks.append(("–í—ã—Å–æ–∫–∏–π", f"–æ—á–µ–Ω—å —Ä–µ–∑–∫–∏–π –ø–µ—Ä–µ–ø–∞–¥ –¥–∞–≤–ª–µ–Ω–∏—è (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ {round(pressure_change_24h)} –º–º —Ä—Ç. —Å—Ç. –∑–∞ —Å—É—Ç–∫–∏)"))
            elif abs(pressure_change_24h) > 3:
                risks.append(("–°—Ä–µ–¥–Ω–∏–π", f"–∑–∞–º–µ—Ç–Ω—ã–π –ø–µ—Ä–µ–ø–∞–¥ –¥–∞–≤–ª–µ–Ω–∏—è (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞ {round(pressure_change_24h)} –º–º —Ä—Ç. —Å—Ç. –∑–∞ —Å—É—Ç–∫–∏)"))

    except (KeyError, IndexError, TypeError) as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ: {e}")

    # 2. –ê–Ω–∞–ª–∏–∑ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π
    try:
        daily_temp = data['daily']
        today_max = daily_temp['temperature_2m_max'][1]
        yesterday_max = daily_temp['temperature_2m_max'][0]
        temp_diff = abs(today_max - yesterday_max)

        if temp_diff > 10:
            risks.append(("–í—ã—Å–æ–∫–∏–π", f"–æ—á–µ–Ω—å —Ä–µ–∑–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–Ω–∞ {round(temp_diff)}¬∞C –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ –≤—á–µ—Ä–∞—à–Ω–∏–º –¥–Ω—ë–º)"))
        elif temp_diff > 5:
            risks.append(("–°—Ä–µ–¥–Ω–∏–π", f"–∑–∞–º–µ—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–Ω–∞ {round(temp_diff)}¬∞C –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ –≤—á–µ—Ä–∞—à–Ω–∏–º –¥–Ω—ë–º)"))
            
    except (KeyError, IndexError, TypeError) as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É: {e}")

    # 3. –ê–Ω–∞–ª–∏–∑ –í–ª–∞–∂–Ω–æ—Å—Ç–∏
    try:
        hourly_humidity = data['hourly']['relative_humidity_2m']
        # –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        past_24h_humidity = [h for t, h in zip(data['hourly']['time'], hourly_humidity) if now - timedelta(hours=24) <= datetime.fromisoformat(t) < now]
        if past_24h_humidity:
            avg_humidity = sum(past_24h_humidity) / len(past_24h_humidity)
            if avg_humidity > 85:
                risks.append(("–ù–∏–∑–∫–∏–π", "–æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞"))
            elif avg_humidity < 30:
                risks.append(("–ù–∏–∑–∫–∏–π", "–æ—á–µ–Ω—å –Ω–∏–∑–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞"))

    except (KeyError, IndexError, TypeError) as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {e}")

    # 4. –ê–Ω–∞–ª–∏–∑ –ì–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (Kp-–∏–Ω–¥–µ–∫—Å)
    try:
        geo_forecast = data.get('geo_forecast', [])
        future_limit = datetime.utcnow().replace(tzinfo=pytz.UTC) + timedelta(hours=24)
        max_kp = 0
        for forecast in geo_forecast:
            forecast_time = datetime.fromisoformat(forecast['time_tag'].replace('Z', '+00:00'))
            if forecast_time < future_limit and forecast['kp_value'] > max_kp:
                max_kp = forecast['kp_value']
        
        if max_kp >= 5:
            risks.append(("–í—ã—Å–æ–∫–∏–π", f"–æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è (Kp-–∏–Ω–¥–µ–∫—Å –¥–æ {int(max_kp)})"))
        elif max_kp >= 3:
            risks.append(("–°—Ä–µ–¥–Ω–∏–π", f"–ø–æ–≤—ã—à–µ–Ω–Ω–∞—è –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (Kp-–∏–Ω–¥–µ–∫—Å –¥–æ {int(max_kp)})"))

    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É: {e}")

    # 5. –ê–Ω–∞–ª–∏–∑ –°–æ–ª–Ω–µ—á–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–°–æ–ª–Ω–µ—á–Ω—ã–π –≤–µ—Ç–µ—Ä)
    try:
        solar_wind = data.get('solar_wind_speed', [])
        if solar_wind:
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å —Å —Å—Ä–µ–¥–Ω–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
            recent_avg = sum(solar_wind[-12:]) / 12 if len(solar_wind) >= 12 else 0
            historical_avg = sum(solar_wind) / len(solar_wind)
            if recent_avg > historical_avg * 1.5: # –ï—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å –≤—ã—Ä–æ—Å–ª–∞ –≤ 1.5 —Ä–∞–∑–∞
                 risks.append(("–ù–∏–∑–∫–∏–π", "—É—Å–∏–ª–µ–Ω–∏–µ —Å–æ–ª–Ω–µ—á–Ω–æ–≥–æ –≤–µ—Ç—Ä–∞"))

    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–ª–Ω–µ—á–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {e}")


    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    if not risks:
        return "–ü—Ä–æ–≥–Ω–æ–∑ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π. –ù–∏–∫–∞–∫–∏—Ö –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç–µ–æ—Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤–ª–∏—è—é—â–∏—Ö –Ω–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è. ‚ú®"

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∏—Å–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é: –í—ã—Å–æ–∫–∏–π -> –°—Ä–µ–¥–Ω–∏–π -> –ù–∏–∑–∫–∏–π
    risk_map = {"–í—ã—Å–æ–∫–∏–π": 2, "–°—Ä–µ–¥–Ω–∏–π": 1, "–ù–∏–∑–∫–∏–π": 0}
    risks.sort(key=lambda x: risk_map[x[0]], reverse=True)
    
    highest_risk_level = risks[0][0]
    
    if highest_risk_level == "–í—ã—Å–æ–∫–∏–π":
        title = "–†–ò–°–ö –í–´–°–û–ö–ò–ô. –û–∂–∏–¥–∞—é—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–≥–æ–¥–µ. üòî"
    elif highest_risk_level == "–°—Ä–µ–¥–Ω–∏–π":
        title = "–†–ò–°–ö –°–†–ï–î–ù–ò–ô. –í–æ–∑–º–æ–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏. üòü"
    else: # –ù–∏–∑–∫–∏–π
        title = "–†–ò–°–ö –ù–ï–ë–û–õ–¨–®–û–ô. –ï—Å—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ. ü§î"

    message = f"<b>{title}</b>\n\n–í–æ—Ç —á—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ:\n"
    for level, reason in risks:
        message += f"‚Ä¢ <b>{level} —Ä–∏—Å–∫:</b> {html.escape(reason)}\n"
        
    message += "\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–∞–∂–¥–æ–º —Ñ–∞–∫—Ç–æ—Ä–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /info."
    return message