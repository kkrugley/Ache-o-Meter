import logging
import aiohttp
from datetime import datetime, timedelta
import asyncio


async def get_forecast_data(lat: float, lon: float):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ, –ø—ã–ª—å—Ü–µ –∏ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö.
    """
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    weather_data, geo_data = await asyncio.gather(
        get_open_meteo_data(lat, lon),
        get_noaa_geo_data()
    )
    return {**weather_data, **geo_data}

async def get_open_meteo_data(lat: float, lon: float):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—ã–ª—å—Ü–µ —Å Open-Meteo."""
    url = "https://api.open-meteo.com/v1/forecast"
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    params = {
        'latitude': lat,
        'longitude': lon,
        'hourly': 'temperature_2m,surface_pressure',
        'daily': 'temperature_2m_max,temperature_2m_min',
        'forecast_days': 2,
        'timezone': 'auto',
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—ã–ª—å—Ü–µ
        'european_aqi': 'pollen_birch,pollen_grass,pollen_ragweed'
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    logging.info("–î–∞–Ω–Ω—ã–µ —Å Open-Meteo —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
                    return await response.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Open-Meteo: {e}")
    return {}

async def get_noaa_geo_data():
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (Kp-–∏–Ω–¥–µ–∫—Å) —Å NOAA."""
    # NOAA –æ–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞
    url = "https://services.swpc.noaa.gov/products/noaa-planetary-k-index-forecast.json"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    # [[–≤—Ä–µ–º—è, –∫–ø-–∏–Ω–¥–µ–∫—Å, —Å—Ç–∞—Ç—É—Å], ...]
                    processed_data = []
                    for item in data[1:]: # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å –≤—Å–µ —Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
                        if len(item) >= 3:
                            processed_data.append({
                                'time': item[0],
                                'kp': float(item[1]),
                                'status': item[2]
                            })
                    logging.info("–î–∞–Ω–Ω—ã–µ –æ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ —Å NOAA —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
                    return {'geo_forecast': processed_data}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å NOAA: {e}")
    return {}

# --- –ê–Ω–∞–ª–∏–∑ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---

def analyze_data_and_form_message(data: dict):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not data:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ. ü§∑‚Äç‚ôÇÔ∏è"

    reasons = [] # –°–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω –¥–ª—è –ø–ª–æ—Ö–æ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è

    # 1. –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–ø–∞–¥–∞ –¥–∞–≤–ª–µ–Ω–∏—è
    try:
        hourly_pressure = data['hourly']['surface_pressure']
        # –ò—â–µ–º –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ 8 —É—Ç—Ä–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞
        pressure_today = hourly_pressure[8]
        pressure_tomorrow = hourly_pressure[32] # 24+8
        pressure_diff = abs(pressure_today - pressure_tomorrow)
        if pressure_diff > 8: # –ü–µ—Ä–µ–ø–∞–¥ –±–æ–ª–µ–µ 8 –≥–ü–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º
            reasons.append(f"–†–µ–∑–∫–∏–π –ø–µ—Ä–µ–ø–∞–¥ –¥–∞–≤–ª–µ–Ω–∏—è (–æ–∫–æ–ª–æ {round(pressure_diff)} –≥–ü–∞)")
    except (KeyError, IndexError):
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ.")

    # 2. –ê–Ω–∞–ª–∏–∑ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∏ (Kp-–∏–Ω–¥–µ–∫—Å)
    try:
        geo_forecast = data.get('geo_forecast', [])
        # –ò—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Kp-–∏–Ω–¥–µ–∫—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        max_kp = 0
        today_str = (datetime.utcnow()).strftime('%Y-%m-%d')
        for forecast in geo_forecast:
            if forecast['time'].startswith(today_str):
                if forecast['kp'] > max_kp:
                    max_kp = forecast['kp']
        
        if max_kp >= 5:
            reasons.append(f"–û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è (Kp-–∏–Ω–¥–µ–∫—Å –¥–æ {int(max_kp)})")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É: {e}")
        
    # 3. –ê–Ω–∞–ª–∏–∑ –ø—ã–ª—å—Ü—ã (–≤ API Open-Meteo –Ω–µ—Ç –æ–±—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞, —Å–º–æ—Ç—Ä–∏–º –ø–æ –≤–∏–¥–∞–º)
    try:
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –±–ª–æ–∫ —Å –ø—ã–ª—å—Ü–æ–π
        if 'european_aqi' in data and data['european_aqi']:
            pollen_levels = data['european_aqi']
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–∏–Ω–¥–µ–∫—Å > 20-30 —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–º–µ—Ç–Ω—ã–º)
            if any(p > 20 for p in pollen_levels.get('pollen_birch', [])[:24]) or \
               any(p > 20 for p in pollen_levels.get('pollen_grass', [])[:24]) or \
               any(p > 20 for p in pollen_levels.get('pollen_ragweed', [])[:24]):
               reasons.append("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—ã–ª—å—Ü—ã –≤ –≤–æ–∑–¥—É—Ö–µ")
    except (KeyError, IndexError):
        logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—ã–ª—å—Ü–µ.")


    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    if not reasons:
        return "–°–µ–≥–æ–¥–Ω—è –≤—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ, –∂–∏–≤–∏-–±–∞–ª–¥–µ–π! üòé"
    
    if len(reasons) == 1:
        message = f"Oof! –ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è —Å–Ω–æ–≤–∞ –Ω–æ–µ—Ç –∏–∑-–∑–∞ **{reasons[0].lower()}**. –î–µ—Ä–∂–∏—Å—å, –¥—Ä—É–≥! üòî"
        return message

    message = "Oof! –ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è —Å–Ω–æ–≤–∞ –Ω–æ–µ—Ç. –î–µ—Ä–∂–∏—Å—å, –¥—Ä—É–≥! üòî\n\n–ü—Ä–∏—á–∏–Ω—ã:\n"
    for reason in reasons:
        message += f"‚Ä¢ {reason}\n"
        
    return message