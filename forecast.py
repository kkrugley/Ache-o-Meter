import logging
import aiohttp
from datetime import datetime, timedelta
import asyncio
import html

# --- –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å API ---

async def get_forecast_data(lat: float, lon: float):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ, –ø—ã–ª—å—Ü–µ –∏ –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö –±—É—Ä—è—Ö.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.gather –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
    weather_data, geo_data = await asyncio.gather(
        get_open_meteo_data(lat, lon),
        get_noaa_geo_data()
    )
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å
    return {**weather_data, **geo_data}

async def get_open_meteo_data(lat: float, lon: float):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∏ –¥–∞–Ω–Ω—ã–µ –æ –ø—ã–ª—å—Ü–µ —Å Open-Meteo.
    """
    url = "https://api.open-meteo.com/v1/forecast"
    params = {
        'latitude': lat,
        'longitude': lon,
        'hourly': 'temperature_2m,surface_pressure',
        'daily': 'temperature_2m_max,temperature_2m_min',
        'forecast_days': 2,  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 48 —á–∞—Å–æ–≤
        'timezone': 'auto',
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ø—ã–ª—å—Ü–µ
        'pollen': 'birch_pollen,grass_pollen,ragweed_pollen'
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ HTTP –æ—à–∏–±–∫–∏
                logging.info("–î–∞–Ω–Ω—ã–µ —Å Open-Meteo —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
                return await response.json()
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Open-Meteo: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Open-Meteo: {e}")
    return {}

async def get_noaa_geo_data():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (Kp-–∏–Ω–¥–µ–∫—Å) —Å NOAA SWPC.
    """
    url = "https://services.swpc.noaa.gov/products/noaa-planetary-k-index-forecast.json"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                response.raise_for_status()
                data = await response.json()
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫
                processed_data = [
                    {'time_tag': item[0], 'kp_value': float(item[1]), 'observation_status': item[2]}
                    for item in data[1:] if len(item) >= 3
                ]
                logging.info("–î–∞–Ω–Ω—ã–µ –æ –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ —Å NOAA —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã.")
                return {'geo_forecast': processed_data}
    except aiohttp.ClientError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ NOAA: {e}")
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å NOAA: {e}")
    return {}

# --- –ê–Ω–∞–ª–∏–∑ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---

def analyze_data_and_form_message(data: dict):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not data:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ. ü§∑‚Äç‚ôÇÔ∏è"

    reasons = []  # –°–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω –¥–ª—è –ø–ª–æ—Ö–æ–≥–æ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è

    # 1. –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–ü–ê–î–ê –î–ê–í–õ–ï–ù–ò–Ø
    try:
        # –ë–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞
        hourly_pressure = data['hourly']['surface_pressure'][:24]
        if hourly_pressure:
            min_pressure = min(hourly_pressure)
            max_pressure = max(hourly_pressure)
            pressure_diff = abs(max_pressure - min_pressure)
            # –ü–æ—Ä–æ–≥ –≤ 8 –≥–ü–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º
            if pressure_diff > 8:
                reasons.append(f"—Ä–µ–∑–∫–∏–π –ø–µ—Ä–µ–ø–∞–¥ –¥–∞–≤–ª–µ–Ω–∏—è (–Ω–∞ {round(pressure_diff)} –≥–ü–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫)")
    except (KeyError, IndexError, TypeError) as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ: {e}")

    # 2. –£–õ–£–ß–®–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ì–ï–û–ú–ê–ì–ù–ò–¢–ù–û–ô –û–ë–°–¢–ê–ù–û–í–ö–ò (Kp-–∏–Ω–¥–µ–∫—Å)
    try:
        geo_forecast = data.get('geo_forecast', [])
        now_utc = datetime.utcnow()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 24 —á–∞—Å–∞ –≤–ø–µ—Ä–µ–¥
        future_limit = now_utc + timedelta(hours=24)
        
        max_kp = 0
        for forecast in geo_forecast:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ datetime –æ–±—ä–µ–∫—Ç
            forecast_time = datetime.fromisoformat(forecast['time_tag'].replace('Z', '+00:00'))
            if now_utc <= forecast_time < future_limit:
                if forecast['kp_value'] > max_kp:
                    max_kp = forecast['kp_value']
        
        if max_kp >= 5:
            reasons.append(f"–æ–∂–∏–¥–∞–µ—Ç—Å—è –º–∞–≥–Ω–∏—Ç–Ω–∞—è –±—É—Ä—è (Kp-–∏–Ω–¥–µ–∫—Å –¥–æ {int(max_kp)})")
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–º–∞–≥–Ω–∏—Ç–Ω—É—é –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É: {e}")

    # 3. –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–´–õ–¨–¶–´
    try:
        if 'pollen' in data:
            pollen_data = data['pollen']
            pollen_types = []
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –ø—ã–ª—å—Ü—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 24 —á–∞—Å–∞
            if any(p > 15 for p in pollen_data.get('birch_pollen', [])[:24] if p is not None):
                pollen_types.append("–±–µ—Ä—ë–∑—ã")
            if any(p > 15 for p in pollen_data.get('grass_pollen', [])[:24] if p is not None):
                pollen_types.append("–∑–ª–∞–∫–æ–≤—ã—Ö —Ç—Ä–∞–≤")
            if any(p > 15 for p in pollen_data.get('ragweed_pollen', [])[:24] if p is not None):
                pollen_types.append("–∞–º–±—Ä–æ–∑–∏–∏")
            
            if pollen_types:
                reasons.append(f"–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—ã–ª—å—Ü—ã –≤ –≤–æ–∑–¥—É—Ö–µ ({', '.join(pollen_types)})")
    except (KeyError, IndexError, TypeError) as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—ã–ª—å—Ü–µ: {e}")

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
    if not reasons:
        # –î–æ–±–∞–≤–∏–º –Ω–µ–º–Ω–æ–≥–æ –¥–∏–Ω–∞–º–∏–∫–∏ –≤ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        from random import choice
        positive_messages = [
            "–°–µ–≥–æ–¥–Ω—è –≤—Å—ë —Å–ø–æ–∫–æ–π–Ω–æ, –∂–∏–≤–∏-–±–∞–ª–¥–µ–π! üòé",
            "–ü—Ä–æ–≥–Ω–æ–∑ –±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π. –ú–æ–∂–Ω–æ —Å–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≥–æ—Ä—ã! ‚õ∞Ô∏è",
            "–ù–∏–∫–∞–∫–∏—Ö —É–≥—Ä–æ–∑ –¥–ª—è —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ù–∞—Å–ª–∞–∂–¥–∞–π—Å—è –¥–Ω—ë–º! ‚ú®"
        ]
        return choice(positive_messages)
    
    if len(reasons) == 1:
        return f"Oof! –ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è —Å—Ç–æ–∏—Ç –ø–æ–±–µ—Ä–µ—á—å —Å–µ–±—è –∏–∑-–∑–∞ <b>{html.escape(reasons[0])}</b>. –î–µ—Ä–∂–∏—Å—å, –¥—Ä—É–≥! üòî"

    message = "Oof! –ö–∞–∂–µ—Ç—Å—è, —Å–µ–≥–æ–¥–Ω—è –∫–æ–º–±–æ. –î–µ—Ä–∂–∏—Å—å, –¥—Ä—É–≥! üòî<br><br>–í–æ—Ç —á—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ:<br>"
    for reason in reasons:
        message += f"‚Ä¢ {html.escape(reason.capitalize())}<br>"
        
    return message
